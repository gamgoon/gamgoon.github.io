---
title: 밑바닥부터 시작하는 딥러닝
layout: post
categories: book
author: Gamgoon
cover: https://farm5.staticflickr.com/4320/36106543395_889d25c1a9_k.jpg
---
개인적으로 이 책을 한마디로 표현하자면,
>(프로그래밍)언어와 수학을 도구로서 바라보게 해준 고마운 책!

그 이유는 아마도 책의 구성과 **아주 쉽고, 친절한 설명** 때문이 아닐까 생각해본다.

# 문제 해결을 위한 도구일 뿐
이 책을 읽으며 처음 든 생각이, (회사 업무로서가 아닌) 문제를 해결하기 위한 도구로서 프로그래밍 언어를 생각해 본적이 있었던가 하는 것이다. 이미 업무에서 사용하는 언어는 정해져있고(참고로 그 흔한 자바개발자), 언어뿐만 아닌 프레임워크와 같은 기타 기술스택 또한 거의 고정으로 정해진 것이 사실이다. 어떤 프로젝트나 기능이 문제로서 주어지지만 정해진 울타리 안에서 해결하게 된다. 즉 언어를 고민하거나 하는 일 따위는 생기지 않는다.

그리고 새로운 언어를 학습하는데 있어서도 한계를 느끼는 가장 큰 이유 또한 언어를 도구로서가 아닌 *학습하는 그 언어 자체를 목적으로 두기* 때문인 것 같다. scala, go, python 등 여러 언어의 기본 입문서 또는 투토리얼을 시작으로 학습해 보지만, 그 이상을 넘기가 쉽지 않았다. 물론 다른 언어 자체를 학습하며 얻는 것들도 있지만, 이것으로 무엇을 하겠다는 뚜렷한 목적성이 없다보니 의욕도 쉽게 사그라들었던 것이다.

수학 역시 마찮가지다. 알고리즘이다 뭐다 개발자에게 있어 수학은 애증의 대상이 아닐 수 없다. 뒤늦게 수학책을 사들고 공부해 보지만, 책의 반을 넘기지 못하고 잊어버린다. 역시나 무엇을 위한 것인지가 명확하지 않았다. 단지 수학을 공부해야겠다는 생각만 했으니...

# 수학을 공부하자가 아닌 이용하자.
일년 전쯤 [모두를 위한 머신러닝](http://hunkim.github.io/ml/) 강의을 하나씩 보다 수식이 등장 하는 순간 흥미를 잃고 말았던 기억이 난다. "수학을 어느정도 해야 할 수 있는거네~" 하면서 말이다. 물론 강의를 들어보면 수학에 대해 아주 가볍게 설명하려고 노력하신다.(현재 내가 보고 있는 강의 까지는... 그 뒤는 어떨지) 미분을 이야기 하면서도 겁먹을 필요 없고 미분을 풀어 주는 사이트를 이용하라고 까지 말씀하시니 말이다. 하지만 그때는 그랬다.

그런데 이 책에서는 이를 너무 쉽고 친절하게 설명을 해준다. 심지어 내가 모든걸 이해하고 책장을 넘기고 있다고 착각하게 만들 정도다. 그리고 수학을 또는 수식을 이용하므로써 얻는 장점을 이해하게 되는 것 같다. 그렇다고 수학에 대해 아주 깊이있게 가르쳐주는 수학책은 아니다. 각 주제에 따라 수식과 그래프, 행렬, 미분등이 왜 필요하고 어떤 의미인지를 친절하게 설명해준다. 즉, 수학공포증을 어느정도 완화시켜준달까? 그래서일까 다시 보기 시작한 "모두를 위한 머신러닝" 강좌가 재미있기까지 하다.(쉽다는 의미는 아님. 책의 내용과 겹쳐지는 내용들도 있고, 파이썬으로 직접 구현한 책과 달리 텐서플로를 이용하는 것도 재미가 있다.)

# REPL 있는 언어가 처음으로 부러워졌다
많은 언어가 REPL이란걸 가지고 있다. scala나 go고 마찮가지고, 함수형 언어 한번 배워보겠다고 하스켈을 설치하고 부터는 계산기가 필요하면 ghci 를 먼저 누르게된다. 하지만 계산기 역활 외에 딱히 필요성을 느끼지 못했다. 그런데 이번에는 바로바로 뭔가를 확인해 볼 수 있는 편리함이 신선하게 다가왔다. 자바라면... 하는 생각을 하니.(물론 찾아보면 자바repl 도 이래저래 있긴한데, 더욱이 곧(?) 나올 java9에 공식적으로 [JShell](http://blog.takipi.com/java-9-early-access-a-hands-on-session-with-jshell-the-java-repl/)이 포함되어있다.)
파이썬도 기본서나 투토리얼 한 두개는 이미 오래전에 학습해 보았다. 하지만, 지금 파이썬을 안다고 할 수준도 못 된다. 하지만 이번 계기를 통해 파이썬이 좀 더 흥미로운 도구로 느껴졌다. numpy 라는 훌륭한 라이브러리는 덤.(찾아보니 자바쪽(JVM)에도 [nd4j](http://nd4j.org/)가 있다고한다.)

# 단언컨대 이보다 더 친절하고 쉬운 입문서는 없다
이제 책 얘기를 해보자면, 기술 서적으로서 입문서는 이래야 한다는 본보기를 보여준 책이 아닐까 싶다. 설명도 설명이지만, 구성 또한 입문자가 자연스럽게 흐름에 빠질 수 있게 잘 되어있는 것 같다. 물론 번역이 그만큼 잘 되어 있기에 가능한 일일 것이다. 물론 마냥 내용이 쉽지만은 않다. "4장 신경망 학습" 전후로 살짝 연결고리가 흔들린다. 활성화 함수, 출력함수, 오차 함수 등이 등장하면서 독자의 좀 더 높은 집중을 요하게 된다. 다음 장인 "오차역전파법"에 들어서기에 앞서 처음부터 다시 한번 정리하며 읽기도 했다. 요즘도 출퇴근 시간을 이용해서 이 책을 3번째 읽고 있는 중이다. 앞서 얘기한 것 처럼 "모두를 위한 머신러닝"강좌도 점심시간과 퇴근후에 한 두개씩 보고 있지만, 이 책의 내용을 좀 더 확실히 이해해 두고 싶어서다. 뒷 부분은 아직 좀 더 읽어야 확실히 이해가 될 것 같다.ㅜ.ㅜ 여담이지만, 이 책을 한번 다 읽은 후, 도서관에서 "[딥러닝 첫걸음](http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=99490705)"이란 책을 빌려서 읽었는데,("밑바닥부터.." 이 책도 처음엔 도서관에서 빌려서 읽었다.) 개인적으론 설명이 너무... 뭐랄까 "첫걸음"이란 제목에 걸맞지 않는 느낌이었다.

책 앞부분은 퍼셉트론을 이용한 논리 회로 구현을 보여주고 XOR(비선형)은 단층 퍼셉트론으로 구현할 수 없음을 설명하며 다층 퍼셉트론으로 해결 할 수 있다는 것을 보여준다. 그런데 왜 비선형으로 XOR을 예로 들었을까 하는 의문이 있었는데, 마침 페북 [그룹](https://www.facebook.com/groups/TensorFlowKR/permalink/501642556843474/)에 올라온 질문의 답글을 통해 이해가 되었다.
>단층 퍼셉트론은 층을 '단층' 으로 고정하고 생각을 해서 그렇다고 봅니다. 물론 지금이야 층을 여러개로 만들어서 해결하면 되지 않는가 생각할 수 있지만 그당시에 단층 퍼셉트론은 선형 판별밖에 하지 못했고 XOR같이 비선형 문제에선 사용하지 못했으니까요.XOR은 진짜 쉽게 생각해낼 수 있는 비선형 문제의 한 예일 뿐입니다. 간단한 비선형 문제인 XOR도 못푸는데 복잡한 분류와 판별이 가능할거라고 생각을 못한거죠.

그런데 그 아래 "밑바닥부터.. 책을 보면 설명이 되어있다" 는 댓글이 있다. ㅎㅎㅎ; 역시나 같은 책을 읽어도 사람 마다 이해하는 수준이 다른 것인가. (변명을 하자면 그 내용 자체는 이해가 되지만, 왜 XOR게이트를 예로 들었는지는 책에 나오지 않는것 같은데...ㅎㅎ; 다만 단층 퍼셉트론으로 해결한 AND, OR, NAND 게이트를 조합해서 XOR을 구현하는 것을 보여주기 위함이라 생각한 정도. 즉, 나의 의문은 왜 논리 회로를 예로 들었을까였던 것.)

마지막으로 책에서는 실습으로 활용하는 데이터가 MNIST 이미지 데이터셋이다. 다양한 손글씨 숫자 이미지들인데, 막상 내가 풀고자하는 문제의 데이터로는 일반적인 사진들인데, 이걸 어떻게 데이터화 하는지에 대한 궁금증은 쉽게 풀리지 않는다. 찾아보면 다양한 글이 있긴한데... 다행인것은 '모두를 위한 머신러닝' 강의에서 다양한 예제를 보여주는 것 같다. 뒷부분에 이에 대한 힌트나 구체적인 뭔가를 던져주지 않을까 기대해 본다.

마침 이에 대한 [질문](https://www.facebook.com/groups/TensorFlowKR/permalink/507996322874764/)이 최근에 올라왔고 답변이 달리고 있다. 텐서플로가 다양한 기능을 제공해 주는 듯.
>tensorflow에서 직접 decode_png나 decode_jpg등의 binary decoder를 제공합니다. tensorflow queue(https://www.tensorflow.org/programme.../threading_and_queues)와 image(https://www.tensorflow.org/api_docs/python/tf/image)를 참조하시면 좋을 것 같네요. opencv에서 불러와서 placeholder로 넣을 수도 있지만, 그렇게하면 opencv 동작 중에는 tensorflow의 파이프라인이 멈춰져서 비효율적입니다.

끝.
